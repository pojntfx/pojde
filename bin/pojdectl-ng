#!/bin/bash

# Prefix for all objects in the Docker daemon.
DOCKER_PREFIX=pojde-ng-
# Name of the CA
CA_VOLUME_NAME=${DOCKER_PREFIX}ca
# Scripts to run to apply/refresh instances. Order matters. "parameters" is run before all others.
SCRIPTS="user apt code-server ttyd novnc jupyter-lab nginx docker ssh git modules webwormhole clean"
# Prefix to display before destructive operations.
CONFIRMATION_PREFIX="This could lead to data loss. Really"

# Shows pojdectl-ng usage information.
print_help() {
    case "$1" in
    "-h" | "--help")
        :
        ;;
    *)
        printf "Unknown command or argument \"${arg}\".\n\n"
        ;;
    esac

    echo "pojdectl-ng is the management tool for pojde-ng.
Global Flags:
[-n]ode <user@host:port>            Remote host to execute on.
                                    If not specified, execute locally.

Modification Commands:
apply <name> <startPort>            Create or upgrade an instance.
    [-f]orce                            Skip confirmation prompts.
    [-u]pgrade                          Pull latest image.
    [-r]recreate                        Re-create the container.
remove [name...]                    Remove instances(s).
    [-f]orce                            Skip confirmation prompts.
    [-c]ustomization                    Remove customizations.
    [-p]references                      Remove preferences.
    [-s]ecurity                         Remove CA.
    [-u]ser data                        Remove user data.
    [-d]eb cache                        Remove .deb cache.
    [-a]ll                              Remove everything.
list                                List all instances.

Lifecycle Commands:
start [name...]                     Start instance(s).
stop [name...]                      Stop instance(s).
restart [name...]                   Restart instance(s).

Utility Commands:
logs <name>                         Get the logs of an instance.
enter <name>                        Get a shell in an instance.
forward <name> [local:remote...]    Forward port(s) from an instance.

Miscellaneous Commands:
upgrade-pojdectl-ng                 Upgrade this tool.
reset-ca [-f]orce                   Reset the CA.

For more information, please visit https://github.com/pojntfx/pojde-ng#Usage."

    exit 0
}

# Asks the user to re-apply their instance.
print_please_reapply() {
    echo 'Please run "pojdectl-ng apply" again to re-initialize.'
}

# Gets a summary of the exposed ports for an instance.
get_port_summary() {
    if [ "$(docker inspect -f '{{ .State.Status }}' $1)" = 'running' ]; then
        start_port="$(docker inspect -f '{{ (index (index .NetworkSettings.Ports "8000/tcp") 0).HostPort }}' $1)"
        end_port=$((${start_port} + 5))

        echo "${start_port}-${end_port}"
    else
        echo "-"
    fi
}

# Checks if the users has passed -h or --help and if they have done so, display the usage information.
# Also check for the -n flag and set env variables accordingly
run_remotely=false
run_remotely_args=false
for arg in $@; do
    case $arg in
    -h | --help)
        print_help ${arg}
        ;;

    -n)
        run_remotely=true
        ;;

    *)
        if [ "${run_remotely}" = "true" ]; then
            if [ "${run_remotely_args}" = "false" ]; then
                run_remotely_args="${arg}"
            fi
        fi
        ;;
    esac
done

# Run remotely if wanted
if [ "${run_remotely}" = "true" ]; then
    # Split host and port args
    host=""
    port=""
    IFS=":"
    i=0
    for part in ${run_remotely_args}; do
        if [ "$i" = "0" ]; then
            host="${part}"
        else
            port="${part}"
        fi

        i=$(($i + 1))
    done
    IFS=" "

    # Exit if Docker is not installed on the remote host
    docker_is_installed=$(if [ -x "$(ssh -p ${port} ${host} command -v docker)" ]; then echo true; else echo false; fi)
    if [ "${docker_is_installed}" = "false" ]; then
        echo "Docker is not installed on remote host ${host}:${port}. Please install Docker there before continuing."

        exit 1
    fi

    # Install pojdectl-ng if not already installed on remote host
    is_already_installed=$(if [ -x "$(ssh -p ${port} ${host} command -v pojdectl-ng)" ]; then echo true; else echo false; fi)
    if [ "${is_already_installed}" = "false" ]; then
        scp -P ${port} $(which pojdectl-ng) ${host}:/usr/local/bin
    fi

    # Strip the `-n` flag from the remote command
    remote_command="$(echo "$@" | sed 's@-n .*:[0-9]\+@@g')"

    # The `forward` commadn requires advanced steps here
    if [ "$1" != "forward" ]; then
        # Run the command remotely
        ssh -tt -p ${port} ${host} pojdectl-ng $remote_command

        # Don't continue with local execution
        exit 0
    fi
fi

# Handle the main commands
case $1 in
# Create or upgrade an instance.
apply)
    # Read configuration from arguments
    name=""
    start_port=""
    end_port=""
    ssh_port=""
    skip_confirmations=false
    pull_latest_image=false
    recreate_container=false
    i=-1
    for arg; do
        i=$((${i} + 1))

        if [ "$i" = "0" ]; then
            continue
        fi

        if [ "${arg}" = "-f" ]; then
            skip_confirmations=true

            continue
        fi

        if [ "${arg}" = "-u" ]; then
            pull_latest_image=true

            continue
        fi

        if [ "${arg}" = "-r" ]; then
            recreate_container=true

            continue
        fi

        if [ "$i" = "1" ]; then
            name=${arg}

            continue
        fi

        if [ "$i" = "2" ]; then
            start_port=${arg}
            end_port=$((${start_port} + 5))

            continue
        fi

        print_help ${arg}
    done

    # Adjust Docker arguments if host system uses OpenRC
    docker_flags=""
    docker_args=""
    docker_image="pojntfx/pojde-ng:latest"
    if [ ! -n "$(which systemctl)" ]; then
        export docker_flags="-e POJDE_NG_OPENRC=true"
        export docker_args="/sbin/openrc-init"
        export docker_image="pojntfx/pojde-ng:latest-openrc"
    fi

    # Pull the latest image
    if [ "${pull_latest_image}" = "true" ]; then
        docker pull ${docker_image}
    fi

    # Re-create the container
    if [ "${recreate_container}" = "true" ]; then
        if [ "${skip_confirmations}" = "true" ]; then
            REPLY='y'
        else
            read -p "${CONFIRMATION_PREFIX} re-create container for ${name} (y/n)? " -n 1 -r
            echo
        fi
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            docker rm -f ${DOCKER_PREFIX}${name}
        fi
    fi

    # Create the container if it doesn't already exist
    if [ ! -n "$(docker ps -q -a -f name=${DOCKER_PREFIX}${name})" ]; then
        docker run \
            -d \
            --name ${DOCKER_PREFIX}${name} \
            --tmpfs /tmp:exec \
            --tmpfs /run:exec \
            --tmpfs /run/lock:exec \
            -v /sys/fs/cgroup:/sys/fs/cgroup:ro \
            -v /var/run/docker.sock:/var/run/docker.sock:z \
            -v ${DOCKER_PREFIX}${name}-preferences:/opt/pojde-ng/preferences:z \
            -v ${CA_VOLUME_NAME}:/opt/pojde-ng/ca:z \
            -v ${DOCKER_PREFIX}${name}-home-root:/root:z \
            -v ${DOCKER_PREFIX}${name}-home-user:/home:z \
            -v ${DOCKER_PREFIX}${name}-apt-cache:/var/cache/apt/archives:z \
            -p ${start_port}-${end_port}:8000-8005 \
            --restart always \
            ${docker_flags} \
            ${docker_image} \
            ${docker_args}
    # If the container does already exist, start it
    else
        docker start ${DOCKER_PREFIX}${name}
    fi

    # Ask for parameters
    docker exec -it ${docker_flags} ${DOCKER_PREFIX}${name} bash -c "/opt/pojde-ng/configuration/parameters.sh"

    # Exit if aborted
    if [ "$?" != "0" ]; then
        echo "Apply aborted, exiting."

        exit 1
    fi

    # Run the upgrade hooks of the scripts
    for script in $SCRIPTS; do
        docker exec -it ${docker_flags} ${DOCKER_PREFIX}${name} bash -c ". /opt/pojde-ng/configuration/${script}.sh && upgrade"
    done
    ;;

# Remove instance(s).
remove)
    # Read configuration from arguments
    names=""
    skip_confirmations=false
    remove_customizations=false
    remove_preferences=false
    remove_user_data=false
    remove_deb_cache=false
    i=-1
    for arg; do
        i=$((${i} + 1))

        if [ "$i" = "0" ]; then
            continue
        fi

        if [ "${arg}" = "-f" ]; then
            skip_confirmations=true

            continue
        fi

        if [ "${arg}" = "-c" ]; then
            remove_customizations=true

            continue
        fi

        if [ "${arg}" = "-p" ]; then
            remove_preferences=true

            continue
        fi

        if [ "${arg}" = "-u" ]; then
            remove_user_data=true

            continue
        fi

        if [ "${arg}" = "-d" ]; then
            remove_deb_cache=true

            continue
        fi

        if [ "${arg}" = "-a" ]; then
            remove_preferences=true
            remove_user_data=true
            remove_deb_cache=true

            continue
        fi

        names="${names} ${arg}"
    done

    # Enable multiple names
    for name in $names; do
        # Remove container
        if [ "${skip_confirmations}" = "true" ]; then
            REPLY='y'
        else
            read -p "${CONFIRMATION_PREFIX} remove container ${name} (y/n)? " -n 1 -r
            echo
        fi
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            docker rm -f ${DOCKER_PREFIX}${name}
        fi

        # Remove customizations
        if [ "${remove_customizations}" = "true" ]; then
            if [ "${skip_confirmations}" = "true" ]; then
                REPLY='y'
            else
                read -p "${CONFIRMATION_PREFIX} remove customizations from ${name} (y/n)? " -n 1 -r
                echo
            fi
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                for script in $SCRIPTS; do
                    docker exec -it ${docker_flags} ${DOCKER_PREFIX}${name} bash -c ". /opt/pojde-ng/configuration/${script}.sh && refresh"
                done

                print_please_reapply
            fi
        fi

        # Remove preferences
        if [ "${remove_preferences}" = "true" ]; then
            if [ "${skip_confirmations}" = "true" ]; then
                REPLY='y'
            else
                read -p "${CONFIRMATION_PREFIX} remove preferences from ${name} (y/n)? " -n 1 -r
                echo
            fi
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                docker volume rm ${DOCKER_PREFIX}${name}-preferences

                print_please_reapply
            fi
        fi

        # Remove user data
        if [ "${remove_user_data}" = "true" ]; then
            if [ "${skip_confirmations}" = "true" ]; then
                REPLY='y'
            else
                read -p "${CONFIRMATION_PREFIX} remove user data from ${name} (y/n)? " -n 1 -r
                echo
            fi
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                docker volume rm ${DOCKER_PREFIX}${name}-home-root ${DOCKER_PREFIX}${name}-home-user

                print_please_reapply
            fi
        fi

        # Remove .deb cache
        if [ "${remove_deb_cache}" = "true" ]; then
            if [ "${skip_confirmations}" = "true" ]; then
                REPLY='y'
            else
                read -p "${CONFIRMATION_PREFIX} remove .deb cache from ${name} (y/n)? " -n 1 -r
                echo
            fi
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                docker volume rm ${DOCKER_PREFIX}${name}-apt-cache
            fi
        fi
    done
    ;;

# List all instances.
list)
    # Get the current containers' IDs
    container_ids=$(docker ps -a --format '{{ .ID }}' -f "name=^${DOCKER_PREFIX}.*")

    # Add a header to the output
    printf "NAME\t\t\tSTATE\t\tPORTS\n"
    # For each container, show the name, state and exposed ports
    for container_id in $container_ids; do
        printf "$(docker inspect -f "{{ index (split .Name \"/${DOCKER_PREFIX}\") 1 }}" ${container_id})\t\t$(docker inspect -f "{{ .State.Status }}" ${container_id})\t\t$(get_port_summary ${container_id})\n"
    done
    ;;

# Start instance(s).
start)
    i=1
    for arg; do
        if [ "$i" -gt 1 ]; then
            docker start ${DOCKER_PREFIX}${arg}
        fi

        i=$(($i + 1))
    done
    ;;

# Stop instance(s).
stop)
    i=1
    for arg; do
        if [ "$i" -gt 1 ]; then
            docker stop ${DOCKER_PREFIX}${arg}
        fi

        i=$(($i + 1))
    done
    ;;

# Restart instance(s).
restart)
    i=1
    for arg; do
        if [ "$i" -gt 1 ]; then
            docker restart ${DOCKER_PREFIX}${arg}
        fi

        i=$(($i + 1))
    done
    ;;

# Get the logs of an instance.
logs)
    name=$2

    # If container uses systemd, tail from journalctl, else tail OpenRC output
    if [ -n "$(docker exec -it ${DOCKER_PREFIX}${name} which systemctl)" ]; then
        docker exec -it ${DOCKER_PREFIX}${name} journalctl -f
    else
        docker logs -f ${DOCKER_PREFIX}${name}
    fi
    ;;

# Get a shell in an instance.
enter)
    name=$2

    docker exec -it ${DOCKER_PREFIX}$2 bash
    ;;

# Forward port(s) from an instance.
forward)
    if [ "${run_remotely}" = "true" ]; then
        # Get the ports to which it will be forwarded on the remote host
        ports_to_forward=""
        IFS=" "
        for arg in $remote_command; do
            local_port=$(echo $arg | grep -Po '^\d+')

            if [ ! -z "${local_port}" ]; then
                ports_to_forward="${ports_to_forward} -L ${local_port}:localhost:${local_port}"
            fi
        done

        # Script to run remotely and locally
        exec_line_remote="pojdectl-ng ${remote_command}"
        exec_line_local="ssh -f -p ${port} ${host} ${ports_to_forward}"

        # Forward from the container on the remote host to the remote host
        ssh -tt -p ${port} ${host} $exec_line_remote # Ensures that we can accept fingerprints, but exits immediately
        ssh -p ${port} ${host} $exec_line_remote     # Does the actual forwarding

        # Forward the forwarded ports to the local host
        nohup $exec_line_local -N >/dev/null 2>&1 &
    else
        # Check if the container exists and exit if it does not
        name=$2
        if [ ! -n "$(docker ps -q -a -f name=${DOCKER_PREFIX}${name})" ]; then
            echo "Instance ${DOCKER_PREFIX}${name} could not be found, exiting."

            exit 1
        fi

        # Get the exposed SSH port
        sshPort=$(docker inspect -f '{{ (index (index .NetworkSettings.Ports "8005/tcp") 0).HostPort }}' $(docker ps -a --format '{{ .ID }}' -f "name=^${DOCKER_PREFIX}${name}.*"))
        sshArgs=""
        outputStatus=""

        # Strip the `-n` flag if a remote command was specified
        stripped_commands="$(echo "$@" | sed 's@-n .*:[0-9]\+@@g')"

        i=1
        for arg in $stripped_commands; do
            if [ "$i" -gt 2 ]; then
                # Get the host and client parts
                arg_parts=""
                IFS=':'
                ni=0
                for arg_part in $arg; do
                    if [ "$ni" = 0 ]; then
                        arg_parts="${arg_parts} ${arg_part}"
                        outputStatus="${outputStatus}${name}:${arg_part} -> "
                    else
                        arg_parts="${arg_parts}:localhost:${arg_part}"
                        outputStatus="${outputStatus}localhost:${arg_part}\n"
                    fi

                    ni=$(($ni + 1))
                done

                IFS=" "
                sshArgs="${sshArgs} -L ${arg_parts}"
            fi

            i=$(($i + 1))
        done

        # Show the newly forwarded ports
        printf "${outputStatus}"

        # Allow accepting fingerprints
        ssh -p ${sshPort} root@localhost "exit 0"

        # Forward in the background
        nohup ssh -f -p ${sshPort} ${sshArgs} root@localhost -N >/dev/null 2>&1 &
    fi
    ;;

# Upgrade this tool.
upgrade-pojdectl-ng)
    # Fetch the latest version from GitHub
    sudo curl -L -o /usr/local/bin/pojdectl-ng https://raw.githubusercontent.com/pojntfx/pojde-ng/main/bin/pojdectl-ng
    # Make it executable
    sudo chmod +x /usr/local/bin/pojdectl-ng
    ;;

# Reset the CA.
reset-ca)
    if [ "${1}" = "-f" ]; then
        REPLY='y'
    else
        read -p "${CONFIRMATION_PREFIX} reset the CA on all containers? This will require re-initialization of all instances. (y/n)" -n 1 -r
        echo
    fi
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        docker volume rm ${CA_VOLUME_NAME}

        echo "Please run \"pojdectl-ng apply\" again for all instances to re-initialize; if you don't do so, you'll loose secure access to them."
    fi
    ;;

*)
    print_help $1
    ;;
esac
