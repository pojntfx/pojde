#!/bin/bash

# Prefix for all objects in the Docker daemon.
DOCKER_PREFIX=pojde-ng-
# Scripts to run to apply/refresh instances. Order matters.
SCRIPTS="parameters user code-server ttyd novnc jupyter-lab nginx docker ssh git modules webwormhole clean"
# Prefix to display before destructive operations.
CONFIRMATION_PREFIX="This could lead to data loss. Really"

# Shows pojdectl-ng usage information.
function print_help() {
    [[ ! "$1" =~ -h|--help ]] && printf "Unknown command or argument \"$1\".\n\n"

    echo "pojdectl-ng is the management tool for pojde-ng.

Modification Commands:
apply <name> <startPort>            Create or upgrade an instance.
    [-f]orce                            Skip confirmation prompts.
    [-u]pgrade                          Pull latest image.
    [-r]recreat                         Re-create the container.
remove [name...]                    Remove instances(s).
    [-f]orce                            Skip confirmation prompts.
    [-c]ustomization                    Remove customizations.
    [-p]references                      Remove preferences.
    [-s]ecurity                         Remove CA.
    [-u]ser data                        Remove user data.
list                                List all instances.

Lifecycle Commands:
start [name...]                     Start instance(s).
stop [name...]                      Stop instance(s).
restart [name...]                   Restart instance(s).

Utility Commands:
logs <name>                         Get the logs of an instance.
enter <name>                        Get a shell in an instance.
forward <name> [local:remote...]    Forward port(s) from an instance.

Miscellaneous Commands:
upgrade-pojdectl-ng                 Upgrade this tool.

For more information, please visit https://github.com/pojntfx/pojde-ng#Usage."

    exit 0
}

# Asks the user to re-apply their instance.
function print_please_reapply() {
    echo 'Please run "pojdectl-ng apply" again to re-initialize.'
}

# Gets a summary of the exposed ports for an instance.
function get_port_summary() {
    start_port="$(docker inspect -f '{{ (index (index .NetworkSettings.Ports "8000/tcp") 0).HostPort }}' $1)"
    end_port=$((${start_port} + 4))
    ssh_port=$((${start_port} + 22))

    echo "${start_port}-${end_port},${ssh_port}"
}

# Checks if the users has passed -h or --help and if they have done so, display the usage information.
for arg in $@; do [[ "$arg" =~ -h|--help ]] && print_help ${arg}; done

# Handle the main commands
case $1 in
# Create or upgrade an instance.
apply)
    # Read configuration from arguments
    name=""
    start_port=""
    end_port=""
    ssh_port=""
    skip_confirmations=false
    pull_latest_image=false
    recreate_container=false
    i=-1
    for arg; do
        i=$((${i} + 1))

        if [ "$i" = "0" ]; then
            continue
        fi

        if [ "$i" = "1" ]; then
            name=${arg}

            continue
        fi

        if [ "$i" = "2" ]; then
            start_port=${arg}
            end_port=$((${start_port} + 4))
            ssh_port=$((${start_port} + 22))

            continue
        fi

        if [ "${arg}" = "-f" ]; then
            skip_confirmations=true

            continue
        fi

        if [ "${arg}" = "-u" ]; then
            pull_latest_image=true

            continue
        fi

        if [ "${arg}" = "-r" ]; then
            recreate_container=true

            continue
        fi

        print_help ${arg}
    done

    # Adjust Docker arguments if host system uses OpenRC
    docker_flags=""
    docker_args=""
    docker_image="pojntfx/pojde-ng:latest"
    if [ ! -n "$(which systemctl)" ]; then
        export docker_flags="-e POJDE_NG_OPENRC=true"
        export docker_args="/sbin/openrc-init"
        export docker_image="pojntfx/pojde-ng:latest-openrc"
    fi

    # Pull the latest image
    if [ "${pull_latest_image}" = "true" ]; then
        docker pull ${docker_image}
    fi

    # Re-create the container
    if [ "${recreate_container}" = "true" ]; then
        if [ "${skip_confirmations}" = "true" ]; then
            REPLY='y'
        else
            read -p "${CONFIRMATION_PREFIX} re-create container for ${name} (y/n)? " -n 1 -r
            echo
        fi
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            docker rm -f ${DOCKER_PREFIX}${name}-preferences
        fi
    fi

    # Create the container if it doesn't already exist
    if [ ! -n "$(docker ps -q -a -f name=${DOCKER_PREFIX}${name})" ]; then
        docker run \
            -d \
            --name ${DOCKER_PREFIX}${name} \
            --tmpfs /tmp:exec \
            --tmpfs /run:exec \
            --tmpfs /run/lock:exec \
            -v /sys/fs/cgroup:/sys/fs/cgroup:ro \
            -v /var/run/docker.sock:/var/run/docker.sock:z \
            -v ${DOCKER_PREFIX}${name}-preferences:/opt/pojde-ng/preferences:z \
            -v ${DOCKER_PREFIX}${name}-ca:/opt/pojde-ng/ca:z \
            -v ${DOCKER_PREFIX}${name}-home-root:/root:z \
            -v ${DOCKER_PREFIX}${name}-home-user:/home:z \
            -p ${start_port}-${end_port}:8000-8004 \
            -p ${ssh_port}:8022 \
            --restart always \
            ${docker_flags} \
            ${docker_image} \
            ${docker_args}
    # If the container does already exist, start it
    else
        docker start ${DOCKER_PREFIX}${name}
    fi

    # Run the upgrade hooks of the scripts
    for script in $SCRIPTS; do
        docker exec -it ${docker_flags} ${DOCKER_PREFIX}${name} bash -c ". /opt/pojde-ng/configuration/${script}.sh && upgrade"
    done
    ;;

# Remove instance(s).
remove)
    # Read configuration from arguments
    names=""
    skip_confirmations=false
    remove_customizations=false
    remove_preferences=false
    remove_ca=false
    remove_user_data=false
    i=-1
    for arg; do
        i=$((${i} + 1))

        if [ "$i" = "0" ]; then
            continue
        fi

        if [ "${arg}" = "-f" ]; then
            skip_confirmations=true

            continue
        fi

        if [ "${arg}" = "-c" ]; then
            remove_customizations=true

            continue
        fi

        if [ "${arg}" = "-p" ]; then
            remove_preferences=true

            continue
        fi

        if [ "${arg}" = "-s" ]; then
            remove_ca=true

            continue
        fi

        if [ "${arg}" = "-u" ]; then
            remove_user_data=true

            continue
        fi

        names="${names} ${arg}"
    done

    # Enable multiple names
    for name in $names; do
        # Remove customizations
        if [ "${remove_customizations}" = "true" ]; then
            if [ "${skip_confirmations}" = "true" ]; then
                REPLY='y'
            else
                read -p "${CONFIRMATION_PREFIX} remove customizations from ${name} (y/n)? " -n 1 -r
                echo
            fi
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                for script in $SCRIPTS; do
                    docker exec -it ${docker_flags} ${DOCKER_PREFIX}${name} bash -c ". /opt/pojde-ng/configuration/${script}.sh && refresh"
                done

                print_please_reapply
            fi
        fi

        # Remove preferences
        if [ "${remove_preferences}" = "true" ]; then
            if [ "${skip_confirmations}" = "true" ]; then
                REPLY='y'
            else
                read -p "${CONFIRMATION_PREFIX} remove preferences from ${name} (y/n)? " -n 1 -r
                echo
            fi
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                docker volume rm ${DOCKER_PREFIX}${name}-preferences

                print_please_reapply
            fi
        fi

        # Remove CA
        if [ "${remove_ca}" = "true" ]; then
            if [ "${skip_confirmations}" = "true" ]; then
                REPLY='y'
            else
                read -p "${CONFIRMATION_PREFIX} remove CA from ${name} (y/n)? " -n 1 -r
                echo
            fi
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                docker volume rm ${DOCKER_PREFIX}${name}-ca

                print_please_reapply
            fi
        fi

        # Remove user data
        if [ "${remove_user_data}" = "true" ]; then
            if [ "${skip_confirmations}" = "true" ]; then
                REPLY='y'
            else
                read -p "${CONFIRMATION_PREFIX} remove user data from ${name} (y/n)? " -n 1 -r
                echo
            fi
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                docker volume rm ${DOCKER_PREFIX}${name}-home-root ${DOCKER_PREFIX}${name}-home-user

                print_please_reapply
            fi
        fi

        # Remove container
        if [ "${skip_confirmations}" = "true" ]; then
            REPLY='y'
        else
            read -p "${CONFIRMATION_PREFIX} remove container ${name} (y/n)? " -n 1 -r
            echo
        fi
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            docker rm -f ${DOCKER_PREFIX}${name}
        fi
    done
    ;;

# List all instances.
list)
    # Get the current containers' IDs
    container_ids=$(docker ps -a --format '{{ .ID }}' -f "name=^${DOCKER_PREFIX}.*")

    # Add a header to the output
    printf "NAME\t\tSTATE\t\tPORTS\n"
    # For each container, show the name, state and exposed ports
    for container_id in $container_ids; do
        printf "$(docker inspect -f "{{ index (split .Name \"/${DOCKER_PREFIX}\") 1 }}" ${container_id})\t\t$(docker inspect -f "{{ .State.Status }}" ${container_id})\t\t$(get_port_summary ${container_id})\n"
    done
    ;;

# Start instance(s).
start)
    i=1
    for arg; do
        if [ "$i" -gt 1 ]; then
            docker start ${DOCKER_PREFIX}${arg}
        fi

        i=$(($i + 1))
    done
    ;;

# Stop instance(s).
stop)
    i=1
    for arg; do
        if [ "$i" -gt 1 ]; then
            docker stop ${DOCKER_PREFIX}${arg}
        fi

        i=$(($i + 1))
    done
    ;;

# Restart instance(s).
restart)
    i=1
    for arg; do
        if [ "$i" -gt 1 ]; then
            docker restart ${DOCKER_PREFIX}${arg}
        fi

        i=$(($i + 1))
    done
    ;;

# Get the logs of an instance.
logs)
    name=$2

    # If container uses systemd, tail from journalctl, else tail OpenRC output
    if [ -n "$(docker exec -it ${DOCKER_PREFIX}${name} which systemctl)" ]; then
        docker exec -it ${DOCKER_PREFIX}${name} journalctl -f
    else
        docker logs -f ${DOCKER_PREFIX}${name}
    fi
    ;;

# Get a shell in an instance.
enter)
    name=$2

    docker exec -it ${DOCKER_PREFIX}$2 bash
    ;;

# Forward port(s) from an instance.
forward)
    name=$2
    # Get the exposed SSH port
    sshPort=$(docker inspect -f '{{ (index (index .NetworkSettings.Ports "8022/tcp") 0).HostPort }}' $(docker ps -a --format '{{ .ID }}' -f "name=^${DOCKER_PREFIX}${name}.*"))
    sshArgs=""
    outputStatus=""

    i=1
    for arg; do
        if [ "$i" -gt 2 ]; then
            # Get the host and client parts
            IFS=':' read -a arg_parts <<<"${arg}"

            sshArgs="${sshArgs} -L ${arg_parts[0]}:localhost:${arg_parts[1]}"
            outputStatus="${outputStatus}${name}:${arg_parts[1]} -> localhost:${arg_parts[0]}\n"
        fi

        i=$(($i + 1))
    done

    # Forward in the background
    nohup ssh -f -p ${sshPort} root@localhost ${sshArgs} -N &>/dev/null

    # Show the newly forwarded ports
    printf "${outputStatus}"
    ;;

# Upgrade this tool.
upgrade-pojdectl-ng)
    # Fetch the latest version from GitHub
    sudo curl -L -o /usr/local/bin/pojdectl-ng https://raw.githubusercontent.com/pojntfx/pojde-ng/main/bin/pojdectl-ng
    # Make it executable
    sudo chmod +x /usr/local/bin/pojdectl-ng
    ;;

*)
    print_help $1
    ;;
esac
