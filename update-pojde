#!/bin/bash

printf "
                   _     __   
    ____  ____    (_)___/ /__ 
   / __ \/ __ \  / / __  / _ \\
  / /_/ / /_/ / / / /_/ /  __/
 / .___/\____/_/ /\__,_/\___/ 
/_/         /___/


Welcome to the pojde updater!

> pojde is free/libre and open source software. For more information, see: https://pojntfx.github.io/pojde/\n\n"

if [ -f /etc/pojde/config.sh ]; then
    printf "Found /etc/pojde/config.sh, doing upgrade. If you want to keep your current configuration, just press ENTER at the following promps.\n\n"

    source /etc/pojde/config.sh
else
    printf "Doing clean installation; please configure pojde using the following prompts.\n\n"
fi

if [ -z ${FULL_NAME+x} ]; then export FULL_NAME="Felicitas Pojtinger"; fi
if [ -z ${MOTD+x} ]; then export MOTD="Welcome to ${FULL_NAME}'s Alpine Linux Distribution!"; fi
if [ -z ${THEIA_IDE_DESCRIPTION+x} ]; then export THEIA_IDE_DESCRIPTION="${FULL_NAME}'s Theia IDE"; fi
if [ -z ${EMAIL+x} ]; then export EMAIL="felicitas@pojtinger.com"; fi
if [ -z ${GITHUB_USERNAME+x} ]; then export GITHUB_USERNAME="pojntfx"; fi

if [ -z ${USERNAME+x} ]; then export USERNAME="pojntfx"; fi
if [ -z ${PASSWORD+x} ]; then export PASSWORD='mysvcpassword'; fi
if [ -z ${DOMAIN+x} ]; then export DOMAIN="pojntfx.dev.alphahorizon.io"; fi
if [ -z ${IP+x} ]; then export IP="100.64.154.242"; fi
if [ -z ${SCREEN_RESOLUTION+x} ]; then export SCREEN_RESOLUTION="1400x1050"; fi

if [ -z ${ENABLE_OS_SETUP+x} ]; then export ENABLE_OS_SETUP="0"; fi
if [ -z ${ENABLE_CSHARP_SUPPORT+x} ]; then export ENABLE_CSHARP_SUPPORT="0"; fi
if [ -z ${ENABLE_NEOVIM_BUILD+x} ]; then export ENABLE_NEOVIM_BUILD="0"; fi

if [ -z ${IDE_NAME+x} ]; then export IDE_NAME="pojde"; fi
if [ -z ${INSTALL_DIR+x} ]; then export INSTALL_DIR="/opt/${IDE_NAME}"; fi
if [ -z ${WORKSPACE_DIR+x} ]; then export WORKSPACE_DIR="/root/${IDE_NAME}-workspace"; fi

read -e -i "$FULL_NAME" -p "Please enter your full name: " input
FULL_NAME="${input:-$FULL_NAME}"
read -e -i "$MOTD" -p "Please enter your system's new message of the day: " input
MOTD="${input:-$MOTD}"
read -e -i "$THEIA_IDE_DESCRIPTION" -p "Please enter your new IDE's description: " input
THEIA_IDE_DESCRIPTION="${input:-$THEIA_IDE_DESCRIPTION}"
read -e -i "$EMAIL" -p "Please enter your email: " input
EMAIL="${input:-$EMAIL}"
read -e -i "$GITHUB_USERNAME" -p "Please enter your GitHub username (for your public SSH keys): " input
GITHUB_USERNAME="${input:-$GITHUB_USERNAME}"
read -e -i "$USERNAME" -p "Please enter your new IDE's username (you'll be accessing the services using this later): " input
USERNAME="${input:-$USERNAME}"
HIDDEN_PASSWORD="$(echo $PASSWORD | sed 's/./\x/g')"
printf "Please enter your new IDE's password (you'll be accessing the services using this later). Don't use dollar signs. Your input is hidden; press ENTER to keep your current password ($HIDDEN_PASSWORD): "
read -s input
echo
if [ "$input" != "" ]; then
    PASSWORD="$input"
fi
read -e -i "$DOMAIN" -p "Please enter your new IDE's domain (used for TLS SAN extensions; localhost is always included. Keep as is if you don't have a domain): " input
DOMAIN="${input:-$DOMAIN}"
read -e -i "$IP" -p "Please enter your new IDE's IP (used for TLS SAN extensions; keep as is if you don't know the IP): " input
IP="${input:-$IP}"
read -e -i "$SCREEN_RESOLUTION" -p "Please enter your virtual screen's resolution: " input
SCREEN_RESOLUTION="${input:-$SCREEN_RESOLUTION}"
read -e -i "$ENABLE_OS_SETUP" -p "Please enter 1 if you want to also setup the OS or 0 if you don't: " input
ENABLE_OS_SETUP="${input:-$ENABLE_OS_SETUP}"
read -e -i "$ENABLE_CSHARP_SUPPORT" -p "Please enter 1 if you want C# support or 0 if you don't: " input
ENABLE_CSHARP_SUPPORT="${input:-$ENABLE_CSHARP_SUPPORT}"
read -e -i "$ENABLE_NEOVIM_BUILD" -p "Please enter 1 if you want to build Neovim from source or 0 if you want the repository version: " input
ENABLE_NEOVIM_BUILD="${input:-$ENABLE_NEOVIM_BUILD}"
echo

read -e -p "All set! Are you sure that you want to start the installation (please enter y/n): " START_INSTALLATION

if [ "$START_INSTALLATION" = "y" ]; then
    mkdir -p /etc/pojde
    echo "export FULL_NAME=\"${FULL_NAME}\"" >/etc/pojde/config.sh
    echo "export MOTD=\"${MOTD}\"" >>/etc/pojde/config.sh
    echo "export THEIA_IDE_DESCRIPTION=\"${THEIA_IDE_DESCRIPTION}\"" >>/etc/pojde/config.sh
    echo "export EMAIL=\"${EMAIL}\"" >>/etc/pojde/config.sh
    echo "export GITHUB_USERNAME=\"${GITHUB_USERNAME}\"" >>/etc/pojde/config.sh
    echo "export USERNAME=\"${USERNAME}\"" >>/etc/pojde/config.sh
    echo "export PASSWORD=\"${PASSWORD}\"" >>/etc/pojde/config.sh
    echo "export DOMAIN=\"${DOMAIN}\"" >>/etc/pojde/config.sh
    echo "export IP=\"${IP}\"" >>/etc/pojde/config.sh
    echo "export ENABLE_OS_SETUP=\"${ENABLE_OS_SETUP}\"" >>/etc/pojde/config.sh
    echo "export ENABLE_CSHARP_SUPPORT=\"${ENABLE_CSHARP_SUPPORT}\"" >>/etc/pojde/config.sh
    echo "export ENABLE_NEOVIM_BUILD=\"${ENABLE_NEOVIM_BUILD}\"" >>/etc/pojde/config.sh
    echo "export IDE_NAME=\"${IDE_NAME}\"" >>/etc/pojde/config.sh
    echo "export INSTALL_DIR=\"${INSTALL_DIR}\"" >>/etc/pojde/config.sh
    echo "export WORKSPACE_DIR=\"${WORKSPACE_DIR}\"" >>/etc/pojde/config.sh

    mkdir -p /etc/pojde
    curl -o /etc/pojde/packages.txt https://raw.githubusercontent.com/pojntfx/pojde/master/packages.txt
    curl -o /etc/pojde/repositories.txt https://raw.githubusercontent.com/pojntfx/pojde/master/repositories.txt
    curl -o /etc/pojde/setup.sh https://raw.githubusercontent.com/pojntfx/pojde/master/setup.sh

    cp /etc/pojde/repositories.txt /etc/apk/repositories
    apk update && apk upgrade

    export SYSTEM_ARCHITECTURE=$(uname -m)
    if [ $SYSTEM_ARCHITECTURE = "x86_64" ]; then
        apk add $(cat /etc/pojde/packages.txt | sed -e ':a;N;$!ba;s/\n/ /g')
    else
        apk add $(cat /etc/pojde/packages.txt | sed -e 's/godot//g' | sed -e 's/xf86-video-intel//g' | sed -e ':a;N;$!ba;s/\n/ /g')
    fi

    sh /etc/pojde/setup.sh
else
    echo "Aborted installation."
fi
